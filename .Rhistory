map_df(~ unique(.) %>% length()) %>%
gather() %>%
arrange(value) %>%
filter(value == 2)
# Determine which variables have two levels
sample_data %>%
# This line calculates how many different values are present within each variable
map_df(~ unique(.) %>% length()) %>%
# These lines just clean up the results
gather() %>%
arrange(value) %>%
filter(value == 2) %>%
pull(key)
# Determine which variables have two levels and save them
binary_vars <- sample_data %>%
# This line calculates how many different values are present within each variable
map_df(~ unique(.) %>% length()) %>%
# These lines just clean up the results
gather() %>%
arrange(value) %>%
filter(value == 2) %>%
# This line pulls the variable names
pull(key)
sample_data %>%
mutate_at(binary_vars, as_numeric)
sample_data %>%
mutate_at(binary_vars, as_numeric(.))
sample_data %>%
mutate_at(binary_vars, as.numeric(.))
sample_data
sample_data %>%
select_at(binary_vars)
sample_data$x4 %>% as.numeric()
sample_data$x4 %>% as_factor() %>% as.numeric()
sample_data$x4 %>% as_factor() %>% as.numeric() %>% `-1`
sample_data$x4 %>% as_factor() %>% as.numeric() %>% `-`1
sample_data$x4 %>% as_factor() %>% as.numeric() %>% `-`(1)
sample_data %>%
select_at(binary_vars) %>%
mutate_if(!is.numeric, function(x)
x %>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data %>%
select_at(binary_vars) %>%
mutate_if(!is.numeric(), function(x)
x %>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data %>%
mutate_if(
binary_vars,
~ case_when(
!is.numeric(.) ~ function(x) x %>% as_factor() %>% as.numeric() %>% `-`(1),
TRUE ~ NA
)
)
sample_data %>%
mutate_at(
binary_vars,
~ case_when(
!is.numeric(.) ~ function(x) x %>% as_factor() %>% as.numeric() %>% `-`(1),
TRUE ~ NA
)
)
sample_data %>%
mutate_at(
binary_vars,
~ case_when(
!is.numeric(.) ~ function(x) x %>% as_factor() %>% as.numeric() %>% `-`(1),
TRUE ~ NA
)
)
sample_data %>%
mutate_at(binary_vars,
~ function(x)
x %>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data %>%
mutate_at(binary_vars,
~ .^2)
sample_data %>%
mutate_at(binary_vars,
~ str_c(., "test"))
sample_data$x2 %>%
%>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data$x2 %>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data$x2 %>% as_factor() %>% as.numeric() %>% `-`(1)
sample_data %>%
mutate_at(binary_vars,
~ function(x)
x %>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data %>%
mutate_at(binary_vars,
~ . %>% as_factor() %>% as.numeric() %>% `-`(1))
sample_data %>%
mutate_at(binary_vars,
~ . %>% as_factor() %>% as.numeric() %>% `-`(1))
function(vct) {
vct %>%
as_factor %>%
as.numeric() %>%
`-`(1)
}
make_binary <- function(vct) {
vct %>%
as_factor %>%
as.numeric() %>%
`-`(1)
}
make_binary(sample_data$x2)
sample_data %>%
mutate_at(binary_vars,
make_binary)
library(tidyverse)
tibble(x = rnorm(1000),
y = rnorm(1000, 10))
sample_data <- tibble(x = rnorm(1000),
y = rnorm(1000, 10))
samp
sample_data %>%
ggplot(aes(x, y)) +
geom_point()
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(
x = "X",
y = bquote('Y'~(^2))
)
x = "X",
y = bquote('Y'~(^2)
)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = bquote('Y' ~ ( ^ 2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = bquote(~ (Y^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = bquote(~ Y^2))
sample_data <- tibble(x = rnorm(1000),
y = x^2)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = bquote(~ Y^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", bquote(~ Y^2)))
bquote(~ Y^2)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", bquote(Y^2)))
bquote(Y^2)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = bquote(Variable: \n Y^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", Y^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", "Y"^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", "Y^2"))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", ring(Y^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", plotmath::ring(Y^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = ring(Y^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = plotmath::ring(Y^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = grDevices::ring(Y^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = paste0("Variable: \n", ring(Y)^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = expression(Channel~Density~(km/km^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = expression(Variable:~(km/km^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = expression(Variable:~(X^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = expression(Variable:~X^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = expression(Variable: \n ~X^2))
expression(~X^2))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable:),
expression(~X^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(paste(expression(Variable:),
expression(~X^2))))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(paste(expression(Variable:),
expression( ~ X ^ 2))))
expression( ~ X ^ 2)
expression(Variable:)
expression(Variable\:)
expression(Variable)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(paste(expression(Variable),
expression( ~ X^2))))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable),
expression(~ X ^ 2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable),
expression(~ X ^ 2))) +
theme(
axis.text.y = element_text(size = 3)
)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable),
expression(~ X ^ 2))) +
theme(
axis.text.y = element_text(size = 1)
)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable),
expression(~ X ^ 2))) +
theme(
axis.text.y = element_text(size = 15)
)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable),
expression(~ X ^ 2))) +
theme(
axis.title.y = element_text(size = 15)
)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(x = "X",
y = as.list(expression(Variable),
expression(~ X ^ 2))) +
theme(
axis.title.y = element_text(size = 3)
)
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(y = expression(atop(CO[2]*" concentration", italic("Lolium perenne"))))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(y = expression(atop("Variable", Y[2]*)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(y = expression(atop("Variable", Y[2])))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(y = expression(atop("Variable", Y^2])))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(y = expression(atop("Variable", Y^2)))
sample_data %>%
ggplot(aes(x, y)) +
geom_point() +
labs(
x = "X",
y = expression(atop("Variable", Y ^ 2))
)
df <- data.frame(
xNames = c("lisa", "frank", "johnny"),
coef_a = c(20, 25, 30),
coef_b = c(1, 3, 5)
)
df %>%
ggplot(, aes(color =  xNames)) +
stat_function(
fun = function(x)
(df$coef_a * x) / (df$coef_b + x),
size = 1,
linetype =
"dashed"
)
df %>%
ggplot(aes(color =  xNames)) +
stat_function(
fun = function(x)
(df$coef_a * x) / (df$coef_b + x),
size = 1,
linetype =
"dashed"
) +
xlim(0, 10)
df %>%
ggplot() +
stat_function(
fun = function(x)
(df$coef_a * x) / (df$coef_b + x),
size = 1,
linetype =
"dashed"
) +
xlim(0, 10)
df %>%
ggplot() +
stat_function(
fun = function(x)
(df$coef_a * x) / (df$coef_b + x),
size = 1,
linetype =
"dashed"
) +
xlim(0, 10) +
facet_wrap(~ xNames)
ggplot(data = df) +
stat_function(
fun = function(x)
(df$coef_a * x) / (df$coef_b + x),
size = 1,
linetype =
"dashed"
) +
xlim(0, 10) +
facet_wrap(~ xNames)
dat <- data.frame(ID = rep(letters[1:10], each = 10),
time = rep(c(1:10), times = 10),
var1 = rnorm(100))
dat
dat <- tibble(ID = rep(letters[1:10], each = 10),
time = rep(c(1:10), times = 10),
var1 = rnorm(100))
dat
flip_vars <- c("b", "e", "g")
dat %>%
pivot_wider(names_from = ID, values_from = var1)
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = desc(b))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
tail()
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = desc(b))
mutate(b = arrange(desc(b))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = arrange(desc(b)))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort(b))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort.int(b, time))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = order_by(time, b))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort(b, decreasing = TRUE)[rank(-time, ties.method = "last")])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
group_by(time) %>%
mutate(b = sort(b, decreasing = TRUE)[rank(-time, ties.method = "last")])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
group_by(time) %>%
mutate(b = sort(b)[rank(-time, ties.method = "last")])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
group_by(time) %>%
mutate(b = sort(b)[rank(time, ties.method = "last")])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
group_by(time) %>%
mutate(b = sort(b, decreasing = TRUE)[rank(time, ties.method = "last")])
dat %>%
pivot_wider(names_from = ID, values_from = var1)
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort(b, decreasing = TRUE))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort(b, decreasing = TRUE)[rank(time), ])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort(b, decreasing = TRUE)[, rank(time)])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = sort(b, decreasing = TRUE)[rank(time)])
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = order_by(b, rank(time)))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = order_by(rank(time), b))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = order_by(time, rank(b)))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = order_by(time, sort(b)))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = order_by(time, expr(b)))
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate(b = rev(b))
dat %>%
pivot_wider(names_from = ID, values_from = var1)
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate_at(
flip_vars,
rev
)
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate_at(
flip_vars,
rev
) %>%
pivot_longer(names_to = ID, values_to = var1)
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate_at(
flip_vars,
rev
) %>%
pivot_longer(cols = a:j, names_to = ID, values_to = var1)
dat %>%
pivot_wider(names_from = ID, values_from = var1) %>%
mutate_at(
flip_vars,
rev
) %>%
pivot_longer(cols = a:j, names_to = "ID", values_to = "var1")
